#!/usr/bin/env python
import sys, os

try:
    from waflib.extras import symwaf2ic
    from waflib.extras.gtest import summary
    recurse = lambda ctx: None
except ImportError:
    from gtest import summary
    from symwaf2ic import recurse_depends
    recurse = lambda ctx: recurse_depends(depends, ctx)

def load_waf_modules(ctx, modules):
    for mo in modules:
        ctx.load(mo)

def depends(dep):
    dep('marocco')
    dep('marocco', 'pymarocco')

def options(opt):
    recurse(opt)
    load_waf_modules(opt, ['compiler_cxx', 'gtest', 'pytest'])

def configure(cfg):
    recurse(cfg)
    load_waf_modules(cfg, ['compiler_cxx', 'gtest', 'pytest'])

def build(bld):
    recurse(bld)

    flags = { "cxxflags" : [
                '-g', '-O0', '-std=c++0x',
                '-pedantic', '-Wall', '-Wextra',
                '-Wno-c++0x-compat',
            ]
        }

    bld(target          = 'test-marocco',
        features        = 'cxx cxxprogram gtest',
        test_main       = 'main.cpp',
        source          = bld.path.ant_glob('**/test-*.cpp'),
        install_path    = os.path.join('bin', 'tests'),
        use             = [
            'marocco',
            'sthal_inc',
            'halbe_inc',
            ],
        **flags)

    bld(tests           = [
            'test-scaling.py'
            ],
        disable         = True , # don't run automatically, but with `--test-execall`
        features        = 'pytest',
        use             = ['marocco', 'pymarocco'],
        install_path    = os.path.join('bin', 'tests'))

    bld.add_post_fun(summary)
